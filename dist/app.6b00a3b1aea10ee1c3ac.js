webpackJsonp([0],{0:function(e,t,n){"use strict";var o=n(1),i=n(97),r=n(280);o.enableProdMode(),i.bootstrap(r.AppComponent).then(function(e){return console.log("Bootstrap success")})["catch"](function(e){return console.log(e)})},280:function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,a=3>r?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(a=(3>r?i(a):r>3?i(t,n,a):i(t,n))||a);return r>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(e,t):void 0},r=n(1),a=n(281),c=n(282),s=n(286),l=function(){function t(){this.title="Angular 2 project from scratch"}return t.prototype.ngOnInit=function(){},t=o([r.Component({moduleId:e.id,selector:"my-app",template:'\n        <app-header></app-header>\n        <div class="app-content">\n            <h1>{{title}}</h1>\n            <button md-raised-button>Test</button>\n            <md-input placeholder="Test" autofocus></md-input>\n        </div>\n    ',styles:["\n        .app-content {\n            position: relative;\n            padding: 40px 25px 30px;\n        }\n      "],directives:[a.MdButton,a.MdAnchor,s.MD_INPUT_DIRECTIVES,c.appHeaderComponent]}),i("design:paramtypes",[])],t)}();t.AppComponent=l},282:function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,a=3>r?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(a=(3>r?i(a):r>3?i(t,n,a):i(t,n))||a);return r>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(e,t):void 0},r=n(1),a=n(283),c=function(){function t(){}return t.prototype.ngOnInit=function(){},t=o([r.Component({moduleId:e.id,selector:"app-header",template:n(284),styles:[n(285)],directives:[a.MdToolbar]}),i("design:paramtypes",[])],t)}();t.appHeaderComponent=c},283:function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,r=arguments.length,a=3>r?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(a=(3>r?i(a):r>3?i(t,n,a):i(t,n))||a);return r>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(e,t):void 0},r=n(1),a=n(1),c=n(1),s=function(){function t(e,t){this.elementRef=e,this.renderer=t}return Object.defineProperty(t.prototype,"color",{get:function(){return this._color},set:function(e){this._updateColor(e)},enumerable:!0,configurable:!0}),t.prototype._updateColor=function(e){this._setElementColor(this._color,!1),this._setElementColor(e,!0),this._color=e},t.prototype._setElementColor=function(e,t){null!=e&&""!=e&&this.renderer.setElementClass(this.elementRef.nativeElement,"md-"+e,t)},o([r.Input(),i("design:type",String)],t.prototype,"color",null),t=o([r.Component({moduleId:e.id,selector:"md-toolbar",template:'<div class="md-toolbar-layout"> <md-toolbar-row> <ng-content></ng-content> </md-toolbar-row> <ng-content select="md-toolbar-row"></ng-content> </div>',styles:["/** * Mixin that creates a new stacking context. * see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */ /** * This mixin hides an element visually. * That means it's still accessible for screen-readers but not visible in view. */ /** * Forces an element to grow to fit floated contents; used as as an alternative to * `overflow: hidden;` because it doesn't cut off contents. */ /** * A mixin, which generates temporary ink ripple on a given component. * When $bindToParent is set to true, it will check for the focused class on the same selector as you included * that mixin. * It is also possible to specify the color palette of the temporary ripple. By default it uses the * accent palette for its background. */ :host { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; width: 100%; min-height: 64px; font-size: 20px; font-weight: 400; font-family: Roboto, \"Helvetica Neue\", sans-serif; padding: 0 16px; -webkit-box-orient: vertical; -webkit-box-direction: normal; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; background: whitesmoke; color: rgba(0, 0, 0, 0.87); } :host.md-primary { background: #009688; color: white; } :host.md-accent { background: #9c27b0; color: rgba(255, 255, 255, 0.870588); } :host.md-warn { background: #f44336; color: white; } :host md-toolbar-row { display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; width: 100%; height: 64px; -webkit-box-orient: horizontal; -webkit-box-direction: normal; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-box-align: center; -webkit-align-items: center; -ms-flex-align: center; align-items: center; } "],changeDetection:r.ChangeDetectionStrategy.OnPush}),i("design:paramtypes",[c.ElementRef,a.Renderer])],t)}();t.MdToolbar=s,t.MD_TOOLBAR_DIRECTIVES=[s]},284:function(e,t){e.exports='<md-toolbar class="main-nav pinned-top">\r\n    <span>Application Header</span>\r\n</md-toolbar>\r\n<span>Test if app header works</span>'},285:function(e,t){e.exports=".main-nav {\r\n    height: 56px;\r\n    min-height: 56px;\r\n    padding: 0 16px;\r\n    background: #0273D4;\r\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.26);\r\n    z-index: 10;\r\n}\r\n\r\n.pinned-top {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n}\r\n\r\n"}});
//# sourceMappingURL=app.6b00a3b1aea10ee1c3ac.js.map